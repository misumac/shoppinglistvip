//
//  ShoppingListInteractor.swift
//  ShoppingList
//
//  Created by Mihai on 3/11/17.
//  Copyright (c) 2017 Mihai. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol ShoppingListInteractorInput {
    var dataSource: AnyTableSource<ListItem> { get }
    func getItems(request: ShoppingListScene.GetItems.Request)
    func toggleGrouping(request: ShoppingListScene.ToggleGrouping.Request)
    func toggleItem(request: ShoppingListScene.ToggleItem.Request)
    func selectItem(request: ShoppingListScene.SelectItem.Request)
    func deleteItem(request: ShoppingListScene.DeleteItem.Request)
}

protocol ShoppingListInteractorOutput {
    func presentDataEvent(response: ShoppingListScene.GetItems.Response)
    func presentGrouping(response: ShoppingListScene.ToggleGrouping.Response)
}

protocol ShoppingListDataSource {
    var selectedItem: ListItem? { get }
}

protocol ShoppingListDataDestination {
    
}

class ShoppingListInteractor: ShoppingListInteractorInput, ShoppingListDataSource, ShoppingListDataDestination {
    
    var output: ShoppingListInteractorOutput!
    var listItemStore: ListItemStoreProtocol!
    var itemDataSource: ItemDataSource<ListItem>!
    var selectedItem: ListItem?
    var categoriesStore: CategoryStoreProtocol!
    var orderedcategories: [String]!
    var listRetrieved = false
    
    var dataSource: AnyTableSource<ListItem> {
        get {
            return AnyTableSource<ListItem>(tableSource: itemDataSource)
        }
    }
    
    // MARK: Business logic
    func getItems(request: ShoppingListScene.GetItems.Request) {
        retrieveCategories()
    }
    
    func toggleGrouping(request: ShoppingListScene.ToggleGrouping.Request) {
        itemDataSource.switchSectionType()
        output.presentGrouping(response: ShoppingListScene.ToggleGrouping.Response(grouped: itemDataSource.showsSections()))
    }
    
    func toggleItem(request: ShoppingListScene.ToggleItem.Request) {
        listItemStore.changeState(forItem: request.item, newState: !request.item.handled)
    }
    
    func selectItem(request: ShoppingListScene.SelectItem.Request) {
        if let index = request.index {
            selectedItem = dataSource.item(forIndexPath: index)
        } else {
            selectedItem = nil
        }
    }

    func deleteItem(request: ShoppingListScene.DeleteItem.Request) {
        listItemStore.delete(item: request.item)
    }
    
    // MARK: internal
    
    func retrieveCategories() {
        categoriesStore.getAllItems { (event) in
            self.orderedcategories = [String]()
            let e = event
            switch e {
            case .initialData(let categories):
                for c in categories {
                    self.orderedcategories.append(c.name)
                }
                self.retrieveItems()
            default:
                break
            }
        }
    }
    
    func retrieveItems() {
        if listRetrieved {
            return
        }
        listRetrieved = true
        itemDataSource = ItemDataSource<ListItem>()
        itemDataSource.sectionComparerDelegate = self
        listItemStore.getItems { (event) in
            DispatchQueue.main.async {
                let e = event
                var newEvent = ListEvent()
                switch e {
                case .itemInserted(let item):
                    newEvent = self.itemDataSource.add(item: item)
                case .itemUpdated(let item):
                    newEvent = self.itemDataSource.update(item: item)
                case .initialData(let items):
                    self.itemDataSource.reset()
                    for item in items {
                        _ = self.itemDataSource.add(item: item)
                    }
                    newEvent = ListEvent()
                case .itemDeleted(let name):
                    newEvent = self.itemDataSource.remove(key: name)
                }
                self.output.presentDataEvent(response: ShoppingListScene.GetItems.Response(dataEvent: newEvent))
            }
        }
    }
}

extension ShoppingListInteractor: SectionComparer {
    func less(section s1: String, thanSection s2: String) -> Bool {
        let i1 = orderedcategories.index(of: s1) ?? -1
        let i2 = orderedcategories.index(of: s2) ?? -1
        return i1 < i2
    }
}
