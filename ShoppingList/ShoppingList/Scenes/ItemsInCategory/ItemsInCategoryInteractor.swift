//
//  ItemsInCategoryInteractor.swift
//  ShoppingList
//
//  Created by Mihai on 3/25/17.
//  Copyright (c) 2017 Mihai. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol ItemsInCategoryInteractorInput {
    var category: Category { get }
    var tableSource: AnyTableSource<Item> { get }
    func getItems(request: ItemsInCategoryScene.GetItems.Request)
    func deleteItem(request: ItemsInCategoryScene.DeteleItem.Request)
}

protocol ItemsInCategoryInteractorOutput {
    func presentItems(response: ItemsInCategoryScene.GetItems.Response)
}

protocol ItemsInCategoryDataSource {
    
}

protocol ItemsInCategoryDataDestination {
    var selectedCategory: Category? { get set }
}

class ItemsInCategoryInteractor: ItemsInCategoryInteractorInput, ItemsInCategoryDataSource, ItemsInCategoryDataDestination {

    var internalTableSource: AnyTableSource<Item>!
    var output: ItemsInCategoryInteractorOutput!
    var selectedCategory: Category?
    var statisticsStore: StatisticsStoreProtocol!
    var dataSource = ItemDataSource<Item>()
    var tableSource: AnyTableSource<Item> {
        get {
            return internalTableSource
        }
    }
    var category: Category {
        get {
            return selectedCategory!
        }
    }
    // MARK: Business logic
    func getItems(request: ItemsInCategoryScene.GetItems.Request) {
        dataSource.reset()
        internalTableSource = AnyTableSource<Item>(tableSource: dataSource)
        statisticsStore.retrieveItems(forCategory: selectedCategory!.name) {[weak self] (event) in
            DispatchQueue.main.async {
                switch event {
                case .initialData(let fItems):
                    for i in fItems {
                        _ = self?.dataSource.add(item: i)
                        self?.statisticsStore.countItemUsage(itemName: i.name, completion: { (count) in
                            self?.updateItemUsage(item: i, count: count)
                        })
                    }
                default:
                    break
                }
                self?.output.presentItems(response: ItemsInCategoryScene.GetItems.Response(event: ListEvent()))
            }
        }
    }
    
    func deleteItem(request: ItemsInCategoryScene.DeteleItem.Request) {
        let item = dataSource.item(forIndexPath: request.index)
        statisticsStore.removeItem(item: item)
    }
    
    func updateItemUsage(item: Item, count: Int) {
        item.usageCount = count
        let e = dataSource.update(item: item)
        output.presentItems(response: ItemsInCategoryScene.GetItems.Response(event: e))
    }
}
