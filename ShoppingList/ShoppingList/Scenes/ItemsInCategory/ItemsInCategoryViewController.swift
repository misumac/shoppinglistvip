//
//  ItemsInCategoryViewController.swift
//  ShoppingList
//
//  Created by Mihai on 3/25/17.
//  Copyright (c) 2017 Mihai. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol ItemsInCategoryViewControllerInput {
    func displayItems(viewModel: ItemsInCategoryScene.GetItems.ViewModel)
}

protocol ItemsInCategoryViewControllerOutput {
    var category: Category { get }
    var tableSource: AnyTableSource<Item> { get }
    func getItems(request: ItemsInCategoryScene.GetItems.Request)
    func deleteItem(request: ItemsInCategoryScene.DeteleItem.Request)
}

class ItemsInCategoryViewController: UIViewController, ItemsInCategoryViewControllerInput {
    
    var output: ItemsInCategoryViewControllerOutput!
    var router: ItemsInCategoryRouter!
    var dateFormatter = DateFormatter()
    
    @IBOutlet weak var tableView: UITableView!
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        ItemsInCategoryConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        dateFormatter.dateStyle = .medium
        tableView.dataSource = self
        tableView.delegate = self
        navigationItem.title = output.category.name
        output.getItems(request: ItemsInCategoryScene.GetItems.Request())
    }
    
    // MARK: Event handling
    
    
    // MARK: Display logic
    func displayItems(viewModel: ItemsInCategoryScene.GetItems.ViewModel) {
        if viewModel.event.isReload() {
            tableView.reloadData()
        } else {
            if viewModel.event.rowUpdates.count > 0 {
                tableView.reloadRows(at: viewModel.event.rowUpdates, with: .automatic)
            }
        }
    }
}

extension ItemsInCategoryViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return output.tableSource.sectionsCount()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return output.tableSource.rows(inSection: section)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "itemCell", for: indexPath)
        let item = output.tableSource.item(forIndexPath: indexPath)
        cell.textLabel?.text = item.name
        var detail = ""
        if let count = item.usageCount {
            detail = "Used \(count) times"
        } else {
            detail = "No data"
        }
        if let date = item.lastUsed {
            detail = detail + " - \(dateFormatter.string(from: date))"
        }
        cell.detailTextLabel?.text = detail
        return cell
    }
}

extension ItemsInCategoryViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let item = output.tableSource.item(forIndexPath: indexPath)
        var actions = [UITableViewRowAction]()
        if let count = item.usageCount {
            if count == 0 {
                let deleteAction = UITableViewRowAction(style: .destructive, title: "Delete") {[weak self] (action, index) in
                    self?.output.deleteItem(request: ItemsInCategoryScene.DeteleItem.Request(index: indexPath))
                    tableView.setEditing(false, animated: true)
                    self?.output.getItems(request: ItemsInCategoryScene.GetItems.Request())
                }
                actions.append(deleteAction)
            }
        }
        return actions
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension ItemsInCategoryViewController: ItemsInCategoryPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router.passDataToNextScene(for: segue)
    }
}
